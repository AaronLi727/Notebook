{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning)\n",
    "data_train=pd.read_csv(\"train.csv\")\n",
    "data_test=pd.read_csv(\"test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "5            6         0       3   \n",
       "6            7         0       1   \n",
       "7            8         0       3   \n",
       "8            9         1       3   \n",
       "9           10         1       2   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                   Moran, Mr. James    male   NaN      0   \n",
       "6                            McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  \n",
       "5      0            330877   8.4583   NaN        Q  \n",
       "6      0             17463  51.8625   E46        S  \n",
       "7      1            349909  21.0750   NaN        S  \n",
       "8      2            347742  11.1333   NaN        S  \n",
       "9      0            237736  30.0708   NaN        C  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    891\n",
       "Survived       891\n",
       "Pclass         891\n",
       "Name           891\n",
       "Sex            891\n",
       "Age            714\n",
       "SibSp          891\n",
       "Parch          891\n",
       "Ticket         891\n",
       "Fare           891\n",
       "Cabin          204\n",
       "Embarked       889\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survived Percentage')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_train.Survived.value_counts(normalize=True).plot.bar()\n",
    "plt.title(\"Survived Percentage\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"Sex\",y=\"Survived\",data=data_train);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survival regards to Class')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_train.Pclass.value_counts(normalize=True).plot.bar()\n",
    "plt.title(\"Survival regards to Class\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"Pclass\", y=\"Survived\", hue= \"Sex\",data=data_train);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    714.000000\n",
       "mean      29.699118\n",
       "std       14.526497\n",
       "min        0.420000\n",
       "25%       20.125000\n",
       "50%       28.000000\n",
       "75%       38.000000\n",
       "max       80.000000\n",
       "Name: Age, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train['Age'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pointplot(x=\"Pclass\", y= \"Age\", hue=\"Sex\", data=data_train,\n",
    "             palette = {\"male\" : \"blue\", \"female\": \"red\"},\n",
    "             markers = ['o','*'], linestyles= ['-','--']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Age_categories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>Adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked Age_categories  \n",
       "0      0         A/5 21171   7.2500   NaN        S       Y. Adult  \n",
       "1      0          PC 17599  71.2833   C85        C          Adult  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S       Y. Adult  \n",
       "3      0            113803  53.1000  C123        S       Y. Adult  \n",
       "4      0            373450   8.0500   NaN        S       Y. Adult  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def name_ages(df, sections, group_names):\n",
    "    df.Age = df.Age.fillna(-0.5)\n",
    "    df[\"Age_categories\"] = pd.cut(df.Age, sections, labels=group_names)\n",
    "    return df\n",
    "    \n",
    "sections = (-1, 0, 5, 12, 18, 21, 35, 60, 120)\n",
    "group_names = ['Missing', 'Infant', 'Child', 'Teen', 'College', 'Y. Adult', 'Adult', 'Senior']\n",
    "\n",
    "\n",
    "train=name_ages(data_train,sections,group_names)\n",
    "test=name_ages(data_test,sections,group_names)\n",
    "data_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"Age_categories\", y=\"Survived\", hue=\"Sex\", data=train);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    491\n",
       "1    216\n",
       "2    184\n",
       "Name: Pclass, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train['Pclass'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass_1</th>\n",
       "      <th>Pclass_2</th>\n",
       "      <th>Pclass_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass_1  Pclass_2  Pclass_3\n",
       "0         0         0         1\n",
       "1         1         0         0\n",
       "2         0         0         1\n",
       "3         1         0         0\n",
       "4         0         0         1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_name = 'Pclass'\n",
    "df = data_train\n",
    "dummies = pd.get_dummies(df[class_name],prefix=class_name)\n",
    "dummies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Age_categories</th>\n",
       "      <th>Pclass_1</th>\n",
       "      <th>Pclass_2</th>\n",
       "      <th>Pclass_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>Adult</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>Y. Adult</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked Age_categories  Pclass_1  \\\n",
       "0      0         A/5 21171   7.2500   NaN        S       Y. Adult         0   \n",
       "1      0          PC 17599  71.2833   C85        C          Adult         1   \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S       Y. Adult         0   \n",
       "3      0            113803  53.1000  C123        S       Y. Adult         1   \n",
       "4      0            373450   8.0500   NaN        S       Y. Adult         0   \n",
       "\n",
       "   Pclass_2  Pclass_3  \n",
       "0         0         1  \n",
       "1         0         0  \n",
       "2         0         1  \n",
       "3         0         0  \n",
       "4         0         1  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def create_dummies(df,class_name):\n",
    "    dummies = pd.get_dummies(df[class_name], prefix=class_name)\n",
    "    df=pd.concat([df,dummies],axis=1)\n",
    "    return df\n",
    "train=create_dummies(data_train,\"Pclass\")\n",
    "test=create_dummies(data_train,\"Pclass\")\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>...</th>\n",
       "      <th>Sex_female</th>\n",
       "      <th>Sex_male</th>\n",
       "      <th>Age_categories_Missing</th>\n",
       "      <th>Age_categories_Infant</th>\n",
       "      <th>Age_categories_Child</th>\n",
       "      <th>Age_categories_Teen</th>\n",
       "      <th>Age_categories_College</th>\n",
       "      <th>Age_categories_Y. Adult</th>\n",
       "      <th>Age_categories_Adult</th>\n",
       "      <th>Age_categories_Senior</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare          ...           Sex_female  \\\n",
       "0      0         A/5 21171   7.2500          ...                    0   \n",
       "1      0          PC 17599  71.2833          ...                    1   \n",
       "2      0  STON/O2. 3101282   7.9250          ...                    1   \n",
       "3      0            113803  53.1000          ...                    1   \n",
       "4      0            373450   8.0500          ...                    0   \n",
       "\n",
       "  Sex_male Age_categories_Missing  Age_categories_Infant  \\\n",
       "0        1                      0                      0   \n",
       "1        0                      0                      0   \n",
       "2        0                      0                      0   \n",
       "3        0                      0                      0   \n",
       "4        1                      0                      0   \n",
       "\n",
       "   Age_categories_Child  Age_categories_Teen  Age_categories_College  \\\n",
       "0                     0                    0                       0   \n",
       "1                     0                    0                       0   \n",
       "2                     0                    0                       0   \n",
       "3                     0                    0                       0   \n",
       "4                     0                    0                       0   \n",
       "\n",
       "   Age_categories_Y. Adult  Age_categories_Adult  Age_categories_Senior  \n",
       "0                        1                     0                      0  \n",
       "1                        0                     1                      0  \n",
       "2                        1                     0                      0  \n",
       "3                        1                     0                      0  \n",
       "4                        1                     0                      0  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = create_dummies(train,\"Sex\")\n",
    "test = create_dummies(test,\"Sex\")\n",
    "train = create_dummies(train,\"Age_categories\")\n",
    "test = create_dummies(test,\"Age_categories\")\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='warn',\n",
       "          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n",
       "          tol=0.0001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = LogisticRegression()\n",
    "columns = ['Pclass_1','Pclass_2','Pclass_3','Sex_female','Sex_male',\n",
    "           'Age_categories_Missing','Age_categories_Infant',\n",
    "           'Age_categories_Child','Age_categories_Teen',\n",
    "           'Age_categories_College','Age_categories_Y. Adult',\n",
    "           'Age_categories_Adult','Age_categories_Senior']\n",
    "lr.fit(train[columns], train['Survived'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "columns = ['Pclass_1','Pclass_2','Pclass_3','Sex_female','Sex_male',\n",
    "           'Age_categories_Missing','Age_categories_Infant',\n",
    "           'Age_categories_Child','Age_categories_Teen',\n",
    "           'Age_categories_College','Age_categories_Y. Adult',\n",
    "           'Age_categories_Adult','Age_categories_Senior']\n",
    "all_x=train[columns]\n",
    "all_y=train['Survived']\n",
    "train_x, test_x, train_y,test_y = train_test_split(all_x, all_y, \n",
    "test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(712, 13)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8100558659217877"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "lr=LogisticRegression()\n",
    "lr.fit(train_x,train_y)\n",
    "predictions = lr.predict(test_x)\n",
    "accuracy = accuracy_score(test_y, predictions)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Dead</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>96</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dead</th>\n",
       "      <td>20</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Survived  Dead\n",
       "Survived        96    14\n",
       "Dead            20    49"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "conf_matrix=confusion_matrix(test_y, predictions)\n",
    "pd.DataFrame(conf_matrix, columns=['Survived','Dead'], \n",
    "           index= [['Survived','Dead']])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
